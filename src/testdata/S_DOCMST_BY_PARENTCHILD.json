[
	{
		"DOCID" : "20251025113700",
		"CATEID" : "20251025112401",
		"AUTHORID" : "L411189",
		"AUTHORNM" : "이상병",
		"RQTEXT" : "GITHUB 리파지토리 생성 방법을 알려줘",
		"RSTEXT" : "GitHub 리포지토리는 웹사이트에서 바로 생성하거나 GitHub Desktop 또는 Git 명령어를 사용하여 생성할 수 있습니다. 웹사이트에서 생성하려면 로그인 후 'Repositories' 탭에서 'New' 버튼을 클릭하고, GitHub Desktop을 사용하려면 'Create a new repository'를 클릭합니다. Git 명령어를 사용하려면 로컬 폴더에서 git init으로 초기화한 후 GitHub와 원격 연결을 설정해야 합니다. \n웹사이트에서 생성하기\nGitHub 웹사이트 접속 및 로그인 .\n오른쪽 상단의 'Repositories' 탭으로 이동합니다.\n'New': 버튼을 클릭합니다.\n새 리포지토리 이름: 을 입력하고, 필요에 따라 설명을 추가합니다.\nPublic: 또는 Private을 선택하여 공개 설정을 합니다.\nREADME 파일: 을 추가하고, .gitignore 및 라이선스를 설정할 수 있습니다.\n'Create repository': 버튼을 클릭하여 리포지토리를 생성합니다. \nGitHub Desktop으로 생성하기\nGitHub Desktop을 열고 'File' > 'New Repository' 를 선택합니다.\n리포지토리 이름, 로컬 경로, 설명 등을 입력합니다.\n'README': 파일로 초기화하여 생성합니다.\n'Create repository': 버튼을 클릭합니다. \nGit 명령어(터미널)로 생성하기\nGit 설치: 가 필요합니다. Git 웹사이트에서 다운로드 및 설치합니다. \n원하는 프로젝트 폴더로 이동하여 git init 명령어를 실행합니다. \nGitHub 웹사이트에서 위에서 설명한 대로 새 리포지토리를 만듭니다.\n생성된 원격 리포지토리의 주소를 복사합니다. \n터미널에서 git remote add origin [복사한 주소] 명령어로 연결합니다. \n`git add .`으로 파일을 스테이징하고, `git commit -m 'Initial commit'`으로 커밋합니다. \n마지막으로 git push origin master 명령어로 원격 저장소에 푸시합니다. ",
		"RMKSTEXT" : "주석은 사용자가 직접 입력하는 것임",
		"TITLE" : "CREATING GITHUB REPOSITORY",
		"PARENTID" : "",
		"KIND" : "github copilot",
		"DT" : "20251025113700",
		"IDX" : "0000"
	},
	{
		"DOCID" : "20251025113702",
		"CATEID" : "20251025112401",
		"AUTHORID" : "L411189",
		"AUTHORNM" : "이상병",
		"RQTEXT" : "GITHUB 리파지토리 생성시 유의점은?",
		"RSTEXT" : "GitHub 저장소를 생성할 때 프로젝트의 목적, 협업 방식, 접근성에 따라 여러 요소를 고려해야 합니다. 다음은 주요 유의점들입니다. \n저장소의 기본 설정\n이름과 설명: 저장소의 이름은 프로젝트의 내용을 한눈에 파악할 수 있도록 명확하게 정하는 것이 좋습니다. 설명은 저장소의 목적을 구체적으로 알려주는 중요한 역할을 합니다.\n공개/비공개 설정:\n공개(Public): 누구나 저장소의 코드를 볼 수 있고 기여할 수 있습니다. 개인 포트폴리오나 오픈 소스 프로젝트에 적합합니다.\n비공개(Private): 특정 팀원만 접근 가능하며, 회사 프로젝트나 민감한 정보가 포함된 경우에 사용합니다.\nREADME 파일: 프로젝트의 대문 역할을 하는 문서입니다. 프로젝트가 무엇인지, 어떻게 설치하고 사용하는지, 기여 방법 등 중요한 정보를 담습니다. 처음 저장소를 만들 때 추가하는 것이 좋습니다. \n협업과 관리\n.gitignore 파일: 불필요한 파일(로그, 빌드 파일, 운영체제별 설정 파일 등)이 저장소에 커밋되지 않도록 관리합니다.\n라이선스(License) 선택: 오픈 소스 프로젝트의 경우, 코드를 어떻게 사용, 수정, 배포할 것인지 명시하는 라이선스를 포함해야 합니다.\n코드 기여 가이드라인 (CONTRIBUTING.md): 다른 개발자가 프로젝트에 참여하는 방법을 안내하는 문서입니다.\n보안 정책 (SECURITY.md): 프로젝트의 보안 취약점 보고 절차를 명시하여, 협업 시 보안 문제를 관리합니다.\n협업 워크플로: 팀원들과 함께 효율적으로 작업할 수 있는 전략을 미리 정해야 합니다. 일반적으로 브랜칭(branching) 방식을 사용하며, 중요한 브랜치(예: main)는 보호 규칙을 설정해 안전하게 관리할 수 있습니다. \n보안 및 성능\n민감한 정보 노출 방지: API 키, 비밀번호 같은 민감한 정보는 절대로 저장소에 커밋하지 않도록 주의해야 합니다. 실수로 커밋한 경우, 이력을 삭제하고 보안 조치를 취해야 합니다.\n대용량 파일 관리: 용량이 큰 파일(예: 바이너리 파일)은 일반적인 Git 커밋 방식으로 관리하지 않고, Git LFS(Large File Storage)를 사용하여 저장소 성능을 유지해야 합니다.\n자동 보안 기능 활용: GitHub의 Dependabot과 같은 자동 보안 기능을 활성화하여 프로젝트의 취약점을 정기적으로 확인하고 관리할 수 있습니다. ",
		"RMKSTEXT" : "",
		"TITLE" : "watch out for CREATING GITHUB REPOSITORY",
		"PARENTID" : "20251025113700",
		"KIND" : "github copilot",
		"DT" : "20251025113700",
		"IDX" : "20251025113702"
	},
	{
		"DOCID" : "20251025113701",
		"CATEID" : "20251025112401",
		"AUTHORID" : "L411189",
		"AUTHORNM" : "이상병",
		"RQTEXT" : "GITHUB 라이센스 종류 알려줘",
		"RSTEXT" : "GitHub의 라이선스 종류로는 MIT, Apache 2.0, BSD, GNU GPL 등이 있으며, 각 라이선스는 소프트웨어 사용 및 배포에 대한 의무 사항이 다릅니다. MIT와 BSD는 비교적 자유로운 사용을 허용하고, Apache 2.0은 특허 관련 조항이 포함되어 있으며, GPL은 수정 및 배포 시 소스 코드 공개 의무가 있는 강력한 카피레프트 라이선스입니다. \n주요 GitHub 라이선스 종류\nMIT License:\n매우 자유로운 사용이 가능하며, 라이선스 및 저작권 명시만 지키면 됩니다. \n상업적 이용에 제약이 적고, 소스 코드 공개 의무가 없습니다. \nGNU General Public License (GPL):\n가장 널리 사용되는 오픈소스 라이선스 중 하나입니다. \n소프트웨어를 수정하거나 배포할 때 GPL에 따라야 하며, 소스 코드도 함께 제공해야 하는 강력한 카피레프트 라이선스입니다. \nApache License 2.0:\n소스 코드 공개 의무는 없지만, 'Apache'라는 이름의 상표권 침해를 금지하고 특허권에 관한 조항이 포함되어 있습니다. \nBSD 라이선스보다 법적으로 더 완결된 내용을 담고 있습니다. \nBSD License:\nGPL보다 덜 제한적이며, 소스 코드 공개 의무가 없습니다. \n라이선스 및 저작권 표시만 하면 배포 시 보증 책임이 없음을 명시할 수 있습니다. \n라이선스 선택 시 고려사항\n소프트웨어를 자유롭게 수정, 배포하고 싶다면 MIT나 BSD 라이선스가 적합할 수 있습니다.\n소스 코드를 공개할 의무를 지고 싶지 않다면 MIT, Apache 2.0, BSD 라이선스를 고려해 볼 수 있습니다.\n수정된 소스 코드를 다른 사람에게 공유할 때 반드시 소스 코드를 공개해야 하는 정책을 원한다면 GPL 라이선스를 선택할 수 있습니다. ",
		"RMKSTEXT" : "",
		"TITLE" : "GITHUB 라이센스",
		"PARENTID" : "",
		"KIND" : "claude sonnet 4.5",
		"DT" : "20251025113701",
		"IDX" : "0000"
	}
]
